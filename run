#!/usr/bin/env ruby

program = $stdin.readlines.join('').gsub(/\s/, '')
#program = File.open('example1').readlines.join('').gsub(/\s/, '')

def parse_variable(stuff)
  if stuff =~ /^([a-zA-Z][a-zA-Z0-9]*)/
    stuff.slice!(0...$1.length)
    $1.to_sym
  end
end

def parse_integer(stuff)
  if stuff =~ /^([0-9]+)/
    stuff.slice!(0...$1.length)
    $1.to_i
  end
end

def parse_value(stuff)
  var = nil
  return var if (var = parse_variable(stuff))
  parse_integer(stuff)
end

def parse_op(stuff)
  if stuff =~ /^([+-]?=)/
    stuff.slice!(0...$1.length)
    $1
  end
end

def parse(stuff)
  statements = []

  while true
    break if stuff.empty?
    break if stuff[0] == '}'
    if stuff[0] == ';'
      stuff.slice!(0...1)
    elsif stuff[0] == '?'
      stuff.slice!(0...1)
      value = parse_value(stuff)
      raise "what the" unless stuff[0] == '{'
      stuff.slice!(0...1)
      sub_statements = parse(stuff)
      raise "what the" unless stuff[0] == '}'
      stuff.slice!(0...1)
      statements << ['?', value, sub_statements]
    elsif stuff[0] == '!'
      stuff.slice!(0...1)
      statements << ['!', parse_value(stuff)]
    else
      var = parse_variable(stuff)
      op = parse_op(stuff)
      val = parse_value(stuff)
      statements << [op, var, val]
    end
  end
  statements
end


def eval_value(value, variables)
  return variables[value] if value.is_a?(Symbol)
  value
end

def eval(statements, variables = {})
  statements.each do |stmt|
    case stmt.first
    when '!'
      puts eval_value(stmt.last, variables)
    when '?'
      eval(stmt.last, variables) if eval_value(stmt[1], variables) == 0
    when '='
      variables[stmt[1]] = eval_value(stmt.last, variables)
    when '+='
      variables[stmt[1]] += eval_value(stmt.last, variables)
    when '-='
      variables[stmt[1]] -= eval_value(stmt.last, variables)
    end
  end
end

statements = parse(program)
eval(statements)
